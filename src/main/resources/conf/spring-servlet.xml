<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cxf="http://cxf.apache.org/core"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd 
       http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd 
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
	<context:component-scan base-package="com.sun" />
	    	
	 <!--  
    - The ContentNegotiatingViewResolver delegates to the InternalResourceViewResolver and BeanNameViewResolver,  
    - and uses the requested media type (determined by the path extension) to pick a matching view.   
    - When the media type is 'text/html', it will delegate to the InternalResourceViewResolver's JstlView,   
    - otherwise to the BeanNameViewResolver.  
    -->  
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">  
        <property name="contentNegotiationManager" ref="cnManager"/>  
        <property name="viewResolvers" ref="beetlViewResolver"/>  
    </bean>  
    
    <bean name="beetlConfig" class="org.beetl.ext.spring.BeetlGroupUtilConfiguration" init-method="init">
        <property name="configFileResource" value="classpath:beetl.properties"/>
	</bean>
	<bean name="beetlViewResolver" class="org.beetl.ext.spring.BeetlSpringViewResolver">
	       	<property name="prefix" value="/pages/"/>
	        <property name="suffix" value=".html"/>
	        <property name="contentType" value="text/html;charset=UTF-8"/>
	        <property name="order" value="0"/>
	        <property name="config" ref="beetlConfig"/>
	</bean>

    <!-- Simple strategy: only path extension is taken into account -->  
    <bean id="cnManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">  
        <property name="favorPathExtension" value="true"/>  
        <property name="ignoreAcceptHeader" value="true"/>  
        <property name="defaultContentType" value="text/html"/>  

        <property name="mediaTypes">  
            <map>  
                <entry key="html" value="text/html" />  
                <entry key="xml" value="application/xml" />  
                <entry key="atom" value="application/atom+xml" />  
            </map>  
        </property>  
    </bean>     	
	    	
    <mvc:annotation-driven>  
         <mvc:message-converters>  
             <bean class="org.springframework.http.converter.StringHttpMessageConverter">  
                 <constructor-arg value="#{T(java.nio.charset.Charset).forName('UTF-8')}"/>  
                 <property name="supportedMediaTypes">  
                     <list>  
                         <value>text/plain;charset=UTF-8</value>  
                         <value>text/html;charset=UTF-8</value>  
                         <value>applicaiton/javascript;charset=UTF-8</value>  
                     </list>  
                 </property>  
                 <property name="writeAcceptCharset"><value>false</value></property>  
             </bean>  
             <bean  
                 class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">  
                 <property name="supportedMediaTypes">  
                     <list>  
                         <value>application/json; charset=UTF-8</value>  
                         <value>application/x-www-form-urlencoded; charset=UTF-8</value>  
                     </list>  
                 </property>  
             </bean>  
         </mvc:message-converters>  
     </mvc:annotation-driven>  
     
  	<mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="com.sun.springshiro.interceptor.AuthInterceptor">
            </bean>
        </mvc:interceptor>
    </mvc:interceptors>  
     
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
	    <property name="securityManager" ref="securityManager"/>
	    <!-- override these for application-specific URLs if you like: -->
	    <property name="loginUrl" value="/public/loginPage"/>
<!-- 	    <property name="successUrl" value="/home.jsp"/> -->
<!-- 	    <property name="unauthorizedUrl" value="/unauthorized.jsp"/> -->
	    <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
	    <!-- defined will be automatically acquired and available via its beanName in chain        -->
	    <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
	    <!-- <property name="filters">
	        <util:map>
	            <entry key="anAlias" value-ref="someFilter"/>
	        </util:map>
	    </property> -->
	    <property name="filterChainDefinitions">
	        <value>
	            # some example chain definitions:
	            /admin/** = authc, roles[admin]
	            /docs/** = authc, perms[document:read]
	            /public/** = anon
	            /shiro/** = authc
	            # more URL-to-FilterChain definitions here
	        </value>
	    </property>
	</bean>
	
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
	    <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
	    <property name="realm" ref="myRealm"/>
	     <property name="sessionManager" ref="sessionManager"/>  
	    <!-- By default the servlet container sessions will be used.  Uncomment this line
	         to use shiro's native sessions (see the JavaDoc for more): -->
	    <!-- <property name="sessionMode" value="native"/> -->
	</bean>
	
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

	<!-- Define the Shiro Realm implementation you want to use to connect to your back-end -->
	<!-- security datasource: -->
	<bean id="myRealm" class="com.sun.springshiro.shiro.AuthRealm"></bean>
	
	<!-- 会话ID生成器 -->  
	<bean id="sessionIdGenerator"   
	class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>  
	<!-- 会话DAO -->  
	<bean id="sessionDAO"   
	class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">  
	    <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>  
	    <property name="sessionIdGenerator" ref="sessionIdGenerator"/>  
	</bean>  
	<!-- 会话验证调度器 -->  
	<bean id="sessionValidationScheduler"   
	class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">  
	    <property name="sessionValidationInterval" value="1800000"/>  
	    <property name="sessionManager" ref="sessionManager"/>  
	</bean>  
	<!-- 会话管理器 -->  
	<bean id="sessionManager" class="org.apache.shiro.session.mgt.DefaultSessionManager">  
	    <property name="globalSessionTimeout" value="1800000"/>  
	    <property name="deleteInvalidSessions" value="true"/>  
	    <property name="sessionValidationSchedulerEnabled" value="true"/>  
	   <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>  
	    <property name="sessionDAO" ref="sessionDAO"/>  
	</bean> 
</beans>